//=============================================================================
//
// camera.cpp
// Author : koduna hirohito
//
//=============================================================================

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "camera.h"
#include "manager.h"

//*****************************************************************************
// コンストラクタ
//*****************************************************************************
CCamera::CCamera()
{
	
}

//*****************************************************************************
// デストラクタ
//*****************************************************************************
CCamera::~CCamera()
{
}

//*****************************************************************************
// 初期化
//*****************************************************************************
HRESULT CCamera::Init()
{

	m_posV = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_posR = D3DXVECTOR3(0.0f, 0.0f, 0.0f);


	m_vecU = D3DXVECTOR3(0.0f, 1.0f, 0.0f);

	/*float fData = m_posV.x - m_posR.x;
	float fData1 = m_posV.z - m_posR.z;
*/
	return S_OK;
}

//*****************************************************************************
// 終了処理
//*****************************************************************************
void CCamera::Uninit()
{
}

//*****************************************************************************
// 更新処理
//*****************************************************************************
void CCamera::Update()
{
	
}

//*****************************************************************************
// 描画処理
//*****************************************************************************
void CCamera::Draw()
{
}

//*****************************************************************************
// カメラのセット
//*****************************************************************************
void CCamera::SetCamera()
{
	CManager *pManager = GetManager();

	LPDIRECT3DDEVICE9 pD3DDevice = nullptr;

	pD3DDevice = pManager->GetDeviceManager();

	//ビューマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxView);

	D3DXMatrixLookAtLH(&m_mtxView, &m_posV, &m_posR, &m_vecU);

	//ビューマトリックスの設定
	pD3DDevice->SetTransform(D3DTS_VIEW, &m_mtxView);

	//プロジェクションマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxProjection);

	//プロジェクションマトリックスの作成
	D3DXMatrixPerspectiveFovLH(&m_mtxProjection,
		D3DXToRadian(45.0f),//視野角
		(float)SCREEN_WIDTH / (float)SCREEN_HEIGHT,//アスペクト比
		10.0f,//どこからどこまでカメラで表示するか
		50000.0f);

	//プロジェクションマトリックスの設定
	pD3DDevice->SetTransform(D3DTS_PROJECTION, &m_mtxProjection);
}

float CCamera::GetRot()
{
	D3DXVECTOR3 vec = m_posR - m_posV;

	float fAngle = atan2f(vec.x, vec.z);

	return fAngle;
}
